family list := family
  inductive node(a) := [ nil | cons of a * node(a) ]
  struct t(a) := { length : int, head : node(a) }

  def is_empty[a](xs : t(a)) : bool :=
    node.match t.head xs with
      nil =>
        true
    | cons(_x, _xs) =>
        false
    end

  def from_array[a](elements : array(a)) : t(a) :=
    for x in elements where t {length, head} := t { length := 0, head := node.nil } do
      t { length := length + 1, head := node.cons(x, head) }
    end

  def tabulate[a](n : int, f : int -> a) : t(a) :=
    for x in 0..n where t {length, head} := t { length := 0, head := node.nil } do
      t { length := length + 1, head := node.cons(f(x), head) }
    end

  def foldr[a, b](f : a * b -> b, y : b, xs : t(a)) : b :=
    let fst := ^(x, y). x in
    let result :=
      for i in 0..t.length xs where (y, xs) := (y, t.head xs) do
        node.match xs with
          nil =>
            (y, xs)
        | cons(x, xs1) =>
            (f(x, y), xs1)
        end
      end
    in
      fst result
end
